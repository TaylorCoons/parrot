openapi: 3.0.0
info:
  description: "A CRUD api to store minecraft coordinates with metadata"
  version: "1.0.0"
  title: "TODO: Fill me in"
  contact:
    email: "TaylorCoons8798@gmail.com"
  license:
    name: "MIT"
    url: "https://www.mit.edu/~amini/LICENSE.md"
paths:
  /world:
    get:
      summary: "Lists all world namespaces"
      description: "List all registered world namespaces"
      responses:
        "200":
          description: "world list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorldNamespace'
    post:
      summary: "Create world namespace"
      description: "Creates a new world namespace"
      requestBody:
            description: "World namespace to create"
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/WorldNamespace'
      responses:
        "200":
          description: "World namespace created"
        "409":
          description: "World namespace name already exists"
  /world/{world}:
    parameters:
      - $ref: "#/components/parameters/world"
    delete:
      summary: "Delete a world namespace"
      description: "Deletes a world namespace with all the of data associated with it"
      responses:
        "200":
          description: "World namepace deleted"
        "404":
          description: "World namespace doesn't exist"
  /world/{world}/coord:
    parameters:
      - $ref: "#/components/parameters/world"
    get:
      summary: "List coords"
      description: "List coords for a world namespace"
      responses:
        "200":
          description: "Coords list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CoordExist'
    post:
      summary: "Create coord"
      description: "Create a coordinate for a namespace"
      requestBody:
        description: "Coord to create"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoordNew'
      responses:
        "200":
          description: "Created coord"
          content:
            application/json:
              schema:
                type: string
  /world/{world}/coord/{coordId}:
    parameters:
      - $ref: "#/components/parameters/world"
      - $ref: "#/components/parameters/coordId"
    get:
      summary: "Coord"
      description: "Returns a coord by id"
      responses:
        "200":
          description: "Get Coord"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoordExist'
        "404":
          description: "Coord doesn't exist"
    put:
      summary: "Update coord"
      description: "Update a coordinate value"
      responses:
        "200":
          description: "Updated Coord"
        "404":
          description: "Coord doesn't exist"
    delete:
      summary: "Delete a coord"
      description: "Delete a coord by id"
      responses:
        "200":
          description: "Coord deleted"
        "404":
          description: "Coord doesn't exist"
    
      
      
      
components:
  parameters:
    world:
        name: "world"
        in: "path"
        description: "World namespace"
        required: true
        schema:
          type: string
    coordId:
      name: "coordId"
      in: "path"
      description: "Coord Id"
      required: true
      schema:
        type: string
  schemas:
    WorldNamespace:
      type: string
      example:
        "MyWorld"
    CoordNew:
      $ref: '#/components/schemas/Coord'
    CoordExist:
      allOf:
        - $ref: '#/components/schemas/Coord'
        - type: object
          properties:
            id:
              type: string
            created:
              type: integer
            updated:
              type: integer
          
    Coord:
      type: object
      properties:
        x:
          type: number
        y:
          type: number
        z:
          type: number
        realm:
          type: string
          enum: [ "overworld", "nether", "end"]
        structure:
          type: string
          enum: [
            "mineshaft",
            "stronghold",
            "dungeon",
            "desert well",
            "fossil",
            "village",
            "desert temple",
            "jungle temple",
            "witch hut",
            "ocean monument",
            "igloo",
            "woodland mansion",
            "nether fortress",
            "bastion remnant",
            "ruined portal",
            "obsidian pillar",
            "end fountain",
            "end gateway portal",
            "end city",
            "end ship"
          ]
        biome:
          type: string
          enum: [
            "plains",
            "forest",
            "jungle",
            "mountains",
            "desert",
            "taiga",
            "snowy tundra",
            "ice spikes",
            "swamp",
            "savannah",
            "badlands",
            "beach",
            "stone shore",
            "river",
            "ocean",
            "mushroom island",
            "basalt delta",
            "crimpson forest",
            "nether wastes",
            "soul sand valley",
            "warped forest"
          ]
        description:
          type: string
        
      